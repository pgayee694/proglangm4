(*#line 31.10 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*)functor Target_LexFn(val getNextTokenPos : string -> {line: word, column: word})(*#line 1.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
=
   struct
    structure UserDeclarations =
      struct
(*#line 1.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*)(* ============================================================================================== *) 
datatype lexresult	= SHELL of string * string * {line: word, column: word};
val error 			= fn x => TextIO.output(TextIO.stdOut,x ^ "\n")
val eof 			= fn () => SHELL("","eof",getNextTokenPos(""))
(* ============================================================================================== *)
(* ------------------------------------------------------------------ *)
(* assumes that ">" does not occur as part of a nonterminal symbol *)
fun generateSchemaTokenName( yytext ) =
    let
		fun split(x, []   ) =  raise General.Fail("an_error")
		  | split(x, y::ys) = if x=y then ys else split(x,ys);
													
		fun splitFirst(symbol,[])    = 	[] (* symbol was not in the input list *)
		  | splitFirst(symbol,x::xs) = 	if x = symbol 
						then (* found split point *)
							[]
						else (* keep looking      *)
							x::splitFirst(symbol,xs);
																		
        val s0   = explode(yytext);
        val s1   = split(#"<",s0);
        val s2   = splitFirst(#">",s1);  
    in
        implode(explode("!#schema_variable_") @ s2)        
    end;
	
(* ------------------------------------------------------------------ *)

(* ============================================================================================== *)
(*#line 35.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
end (* end of user routines *)
exception LexError (* raised if illegal leaf action tried *)
structure Internal =
	struct

datatype yyfinstate = N of int
type statedata = {fin : yyfinstate list, trans: string}
(* transition & final state table *)
val tab = let
val s = [ 
 (0, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (1, 
"\003\003\003\003\003\003\003\003\003\071\072\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\071\069\003\003\003\068\066\003\065\064\063\061\003\059\003\058\
\\057\055\055\055\055\055\055\055\055\055\003\054\048\046\044\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\003\
\\003\003\003\003\003\003\003\003\003\003\003\003\003\003\043\003\
\\003\008\039\008\008\035\028\008\008\024\008\008\008\008\008\008\
\\019\008\008\008\015\008\008\010\008\008\008\007\005\004\003\003\
\\003"
),
 (5, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\
\\000"
),
 (8, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (10, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\011\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (11, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\012\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (12, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\013\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (13, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\014\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (15, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\016\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (16, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\017\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (17, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\018\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (19, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\020\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (20, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\021\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (21, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\022\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (22, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\023\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (24, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\027\009\009\009\009\009\009\009\025\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (25, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\026\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (28, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\031\009\009\009\009\009\009\009\009\009\009\009\009\009\029\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (29, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\030\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (31, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\032\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (32, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\033\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (33, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\034\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (35, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\036\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (36, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\037\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (37, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\038\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (39, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\040\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (40, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\041\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (41, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\009\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000\009\009\009\009\009\009\009\009\009\009\009\042\009\009\009\
\\009\009\009\009\009\009\009\009\009\009\009\000\000\000\000\000\
\\000"
),
 (44, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\045\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (46, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (48, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\053\000\000\
\\000\049\049\049\049\049\049\049\049\049\049\049\049\049\049\049\
\\049\049\049\049\049\049\049\049\049\049\049\000\000\000\000\000\
\\000\049\049\049\049\049\049\049\049\049\049\049\049\049\049\049\
\\049\049\049\049\049\049\049\049\049\049\049\000\000\000\000\000\
\\000"
),
 (49, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\049\049\049\049\049\049\049\049\049\049\000\000\000\000\050\000\
\\000\049\049\049\049\049\049\049\049\049\049\049\049\049\049\049\
\\049\049\049\049\049\049\049\049\049\049\049\000\000\000\000\049\
\\000\049\049\049\049\049\049\049\049\049\049\049\049\049\049\049\
\\049\049\049\049\049\049\049\049\049\049\049\000\000\000\000\000\
\\000"
),
 (50, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\051\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (51, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\000\
\\000\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\
\\052\052\052\052\052\052\052\052\052\052\052\000\000\000\000\052\
\\000\052\052\052\052\052\052\052\052\052\052\052\052\052\052\052\
\\052\052\052\052\052\052\052\052\052\052\052\000\000\000\000\000\
\\000"
),
 (55, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\056\056\056\056\056\056\056\056\056\056\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (59, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\060\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (61, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\062\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (66, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\067\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (69, 
"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\070\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
 (71, 
"\000\000\000\000\000\000\000\000\000\072\072\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\072\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\\000"
),
(0, "")]
fun f x = x 
val s = map f (rev (tl (rev s))) 
exception LexHackingError 
fun look ((j,x)::r, i: int) = if i = j then x else look(r, i) 
  | look ([], i) = raise LexHackingError
fun g {fin=x, trans=i} = {fin=x, trans=look(s,i)} 
in Vector.fromList(map g 
[{fin = [], trans = 0},
{fin = [], trans = 1},
{fin = [], trans = 1},
{fin = [(N 127)], trans = 0},
{fin = [(N 47),(N 127)], trans = 0},
{fin = [(N 97),(N 127)], trans = 5},
{fin = [(N 89)], trans = 0},
{fin = [(N 49),(N 127)], trans = 0},
{fin = [(N 114),(N 127)], trans = 8},
{fin = [(N 114)], trans = 8},
{fin = [(N 114),(N 127)], trans = 10},
{fin = [(N 114)], trans = 11},
{fin = [(N 114)], trans = 12},
{fin = [(N 114)], trans = 13},
{fin = [(N 14),(N 114)], trans = 8},
{fin = [(N 114),(N 127)], trans = 15},
{fin = [(N 114)], trans = 16},
{fin = [(N 114)], trans = 17},
{fin = [(N 45),(N 111),(N 114)], trans = 8},
{fin = [(N 114),(N 127)], trans = 19},
{fin = [(N 114)], trans = 20},
{fin = [(N 114)], trans = 21},
{fin = [(N 114)], trans = 22},
{fin = [(N 34),(N 114)], trans = 8},
{fin = [(N 114),(N 127)], trans = 24},
{fin = [(N 114)], trans = 25},
{fin = [(N 3),(N 114)], trans = 8},
{fin = [(N 23),(N 114)], trans = 8},
{fin = [(N 114),(N 127)], trans = 28},
{fin = [(N 114)], trans = 29},
{fin = [(N 18),(N 114)], trans = 8},
{fin = [(N 114)], trans = 31},
{fin = [(N 114)], trans = 32},
{fin = [(N 114)], trans = 33},
{fin = [(N 40),(N 111),(N 114)], trans = 8},
{fin = [(N 114),(N 127)], trans = 35},
{fin = [(N 114)], trans = 36},
{fin = [(N 114)], trans = 37},
{fin = [(N 28),(N 114)], trans = 8},
{fin = [(N 114),(N 127)], trans = 39},
{fin = [(N 114)], trans = 40},
{fin = [(N 114)], trans = 41},
{fin = [(N 8),(N 114)], trans = 8},
{fin = [(N 67),(N 127)], trans = 0},
{fin = [(N 74),(N 127)], trans = 44},
{fin = [(N 77)], trans = 0},
{fin = [(N 91),(N 127)], trans = 46},
{fin = [(N 80)], trans = 0},
{fin = [(N 69),(N 127)], trans = 48},
{fin = [], trans = 49},
{fin = [], trans = 50},
{fin = [], trans = 51},
{fin = [(N 125)], trans = 51},
{fin = [(N 72)], trans = 0},
{fin = [(N 20),(N 127)], trans = 0},
{fin = [(N 101),(N 127)], trans = 55},
{fin = [(N 101)], trans = 55},
{fin = [(N 101),(N 127)], trans = 0},
{fin = [(N 63),(N 127)], trans = 0},
{fin = [(N 59),(N 127)], trans = 59},
{fin = [(N 55)], trans = 0},
{fin = [(N 57),(N 127)], trans = 61},
{fin = [(N 52)], trans = 0},
{fin = [(N 61),(N 127)], trans = 0},
{fin = [(N 95),(N 127)], trans = 0},
{fin = [(N 93),(N 127)], trans = 0},
{fin = [(N 127)], trans = 66},
{fin = [(N 86)], trans = 0},
{fin = [(N 65),(N 127)], trans = 0},
{fin = [(N 127)], trans = 69},
{fin = [(N 83)], trans = 0},
{fin = [(N 117),(N 127)], trans = 71},
{fin = [(N 117)], trans = 71}])
end
structure StartStates =
	struct
	datatype yystartstate = STARTSTATE of int

(* start state definitions *)

val INITIAL = STARTSTATE 1;

end
type result = UserDeclarations.lexresult
	exception LexerError (* raised if illegal leaf action tried *)
end

structure YYPosInt : INTEGER = Int
fun makeLexer yyinput =
let	val yygone0= YYPosInt.fromInt ~1
	val yyb = ref "\n" 		(* buffer *)
	val yybl = ref 1		(*buffer length *)
	val yybufpos = ref 1		(* location of next character to use *)
	val yygone = ref yygone0	(* position in file of beginning of buffer *)
	val yydone = ref false		(* eof found yet? *)
	val yybegin = ref 1		(*Current 'start state' for lexer *)

	val YYBEGIN = fn (Internal.StartStates.STARTSTATE x) =>
		 yybegin := x

fun lex () : Internal.result =
let fun continue() = lex() in
  let fun scan (s,AcceptingLeaves : Internal.yyfinstate list list,l,i0) =
	let fun action (i,nil) = raise LexError
	| action (i,nil::l) = action (i-1,l)
	| action (i,(node::acts)::l) =
		case node of
		    Internal.N yyk => 
			(let fun yymktext() = substring(!yyb,i0,i-i0)
			     val yypos = YYPosInt.+(YYPosInt.fromInt i0, !yygone)
			open UserDeclarations Internal.StartStates
 in (yybufpos := i; case yyk of 

			(* Application actions *)

  101 => let val yytext=yymktext() in (*#line 78.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("integer"   , yytext,     getNextTokenPos(yytext))    (*#line 609.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 111 => let val yytext=yymktext() in (*#line 79.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("boolean"        , yytext,     getNextTokenPos(yytext))    (*#line 611.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 114 => let val yytext=yymktext() in (*#line 80.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL("id"        , yytext,     getNextTokenPos(yytext))    (*#line 613.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 117 => let val yytext=yymktext() in (*#line 82.28 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) getNextTokenPos(yytext); lex()  (*#line 615.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 125 => let val yytext=yymktext() in (*#line 83.41 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(generateSchemaTokenName(yytext), yytext, getNextTokenPos(yytext))    (*#line 617.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 127 => let val yytext=yymktext() in (*#line 85.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) error("ignored an unprintable character: " ^ yytext); getNextTokenPos(yytext); lex()  (*#line 619.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 14 => let val yytext=yymktext() in (*#line 47.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 621.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 18 => let val yytext=yymktext() in (*#line 48.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 623.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 20 => let val yytext=yymktext() in (*#line 49.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 625.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 23 => let val yytext=yymktext() in (*#line 50.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 627.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 28 => let val yytext=yymktext() in (*#line 51.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 629.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 3 => let val yytext=yymktext() in (*#line 45.41 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 631.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 34 => let val yytext=yymktext() in (*#line 52.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 633.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 40 => let val yytext=yymktext() in (*#line 53.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 635.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 45 => let val yytext=yymktext() in (*#line 54.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 637.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 47 => let val yytext=yymktext() in (*#line 55.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 639.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 49 => let val yytext=yymktext() in (*#line 56.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 641.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 52 => let val yytext=yymktext() in (*#line 57.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 643.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 55 => let val yytext=yymktext() in (*#line 58.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 645.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 57 => let val yytext=yymktext() in (*#line 59.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 647.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 59 => let val yytext=yymktext() in (*#line 60.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 649.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 61 => let val yytext=yymktext() in (*#line 61.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 651.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 63 => let val yytext=yymktext() in (*#line 62.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 653.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 65 => let val yytext=yymktext() in (*#line 63.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 655.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 67 => let val yytext=yymktext() in (*#line 64.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 657.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 69 => let val yytext=yymktext() in (*#line 65.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 659.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 72 => let val yytext=yymktext() in (*#line 66.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 661.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 74 => let val yytext=yymktext() in (*#line 67.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 663.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 77 => let val yytext=yymktext() in (*#line 68.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 665.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 8 => let val yytext=yymktext() in (*#line 46.42 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 667.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 80 => let val yytext=yymktext() in (*#line 69.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 669.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 83 => let val yytext=yymktext() in (*#line 70.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 671.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 86 => let val yytext=yymktext() in (*#line 71.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 673.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 89 => let val yytext=yymktext() in (*#line 72.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 675.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 91 => let val yytext=yymktext() in (*#line 73.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 677.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 93 => let val yytext=yymktext() in (*#line 74.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 679.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 95 => let val yytext=yymktext() in (*#line 75.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 681.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| 97 => let val yytext=yymktext() in (*#line 76.45 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec"*) SHELL(yytext        , yytext,     getNextTokenPos(yytext))    (*#line 683.1 "C:\proglangm4-master\Domain-Template\Transformation\bin\target_tokens.spec.sml"*)
 end
| _ => raise Internal.LexerError

		) end )

	val {fin,trans} = Vector.sub(Internal.tab, s)
	val NewAcceptingLeaves = fin::AcceptingLeaves
	in if l = !yybl then
	     if trans = #trans(Vector.sub(Internal.tab,0))
	       then action(l,NewAcceptingLeaves
) else	    let val newchars= if !yydone then "" else yyinput 1024
	    in if (size newchars)=0
		  then (yydone := true;
		        if (l=i0) then UserDeclarations.eof ()
		                  else action(l,NewAcceptingLeaves))
		  else (if i0=l then yyb := newchars
		     else yyb := substring(!yyb,i0,l-i0)^newchars;
		     yygone := YYPosInt.+(!yygone, YYPosInt.fromInt i0);
		     yybl := size (!yyb);
		     scan (s,AcceptingLeaves,l-i0,0))
	    end
	  else let val NewChar = Char.ord(CharVector.sub(!yyb,l))
		val NewChar = if NewChar<128 then NewChar else 128
		val NewState = Char.ord(CharVector.sub(trans,NewChar))
		in if NewState=0 then action(l,NewAcceptingLeaves)
		else scan(NewState,NewAcceptingLeaves,l+1,i0)
	end
	end
(*
	val start= if substring(!yyb,!yybufpos-1,1)="\n"
then !yybegin+1 else !yybegin
*)
	in scan(!yybegin (* start *),nil,!yybufpos,!yybufpos)
    end
end
  in lex
  end
end
